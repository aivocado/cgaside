[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CGAlpha : CGINSIDE X KPMG Internship Team A",
    "section": "",
    "text": "EDA Commentary\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 21, 2023\n\n\nhypeduck\n\n\n\n\n\n\n  \n\n\n\n\nCommentary on Data 임동건\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 20, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nCommentary on Data 고유정\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 20, 2023\n\n\nYJ KO\n\n\n\n\n\n\n  \n\n\n\n\nMarkDown Guide\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 13, 2023\n\n\nCGAlpha\n\n\n\n\n\n\n  \n\n\n\n\nOpenAI’s 1st Devday Recap\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 12, 2023\n\n\nhypeduck\n\n\n\n\n\n\n  \n\n\n\n\nOpenAI DevDay Recap 고유정\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\nYJ Ko\n\n\n\n\n\n\n  \n\n\n\n\nOpenAI DevDay, Opening Keynote 임동건\n\n\n\n\n\n\n\nnews\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 9, 2023\n\n\nDG Lim\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 7, 2023\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nNov 4, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/opeanai-devday_hypeduck/index.html#extensibility-gpts-gpt-store",
    "href": "posts/opeanai-devday_hypeduck/index.html#extensibility-gpts-gpt-store",
    "title": "OpenAI’s 1st Devday Recap",
    "section": "1. Extensibility : GPTs & GPT Store",
    "text": "1. Extensibility : GPTs & GPT Store\n\nGPTs\n\n대화만으로 보다 손쉬운 GPT 사용자화 모델 생성 및 저장 가능.\n기존 GPT를 사용자화하기 위해서는 Prompt Engineering이나 Fine Tuning 등의 방법을 통해 훈련을 시킬 수 밖에 없었다.\n\nPrompt Engineering의 경우, 방법을 알아야할 뿐더러 휘발성이 있었기 때문에 영구적이지 않다.\nFine Tuning의 경우, 학습에 따른 비용이 발생하고, 결코 저렴하다고는 볼 수 없다.\n\n이를 GUI, Coding도 아닌 자연어 대화만으로 모델을 생성할 수 있도록 보조자인 GPT Builder를 제공한다.\n생성한 GPTs 모델을 일반 사용자가 사용할 때, 데이터를 공유할 지 말 지도 선택하여 정보를 보호한다.\n\nGPT Store (11월 말 예정)\n\n생성한 GPTs를 다른 사용자들과 공유하거나, 수익을 창출하기 위한 스토어.\nApple이 AppStore를 통해 제한적으로 확장성을 제공하면서 폭발적인 성장의 하나의 계기가 된 만큼, 기대가 된다."
  },
  {
    "objectID": "posts/opeanai-devday_hypeduck/index.html#for-users-gpt-4-turbo-agi",
    "href": "posts/opeanai-devday_hypeduck/index.html#for-users-gpt-4-turbo-agi",
    "title": "OpenAI’s 1st Devday Recap",
    "section": "2. For Users : GPT 4 Turbo = AGI",
    "text": "2. For Users : GPT 4 Turbo = AGI\n\nChatGPT는 자연어 대화형식 만으로도 충분히 성과를 냈지만,\n궁극적으로 AI에게 바라는 것은 일반적인 상황에서 인간과 같이 시각, 청각 등의 모든 입출력 요소를 활용 여부이다.\n이를 AGI(Artificial General Intelligence), 일반 인공지능으로 부르고, 강인공지능으로 분류한다.\n\nGPT 4는 이제 사용자가 매번 설정을 스위치할 필요 없이, 통합된 사용성을 제공한다.\n\n\nIntegrated Multimodality\n\n이미지 : DALL·E 3\n\n2023년 9월 공개되어, 인기 모델인 MidJourney와 Stable Diffusion보다 요청사항들을 잘 반영한다.\n\n음성 : Whisper v3\n\nASR(Automatic Speech Recognition): 자동으로 음성을 인식하여 문자로 변환한다.\nTTS(Text-to-Speech) : 문자를 다시 음성으로 변환한다. 속도, 정확성 각각에 초점을 둔 2가지 모델이 있다.\n\n\n\n\nGPT 4 Turbo, GPT 3.5 Turbo (Fine-Tuning)\n\n모델의 크기는 키워 범용성을 키우고, 비용은 줄였다.\n기존 GPT 4가 8k, 32k만 처리하던 것에 비해, 12만 8천개의 토큰을 처리한다.\n\n100개의 토큰이 약 영단어 기준으로 약 75개 단어로,\n96000개의 단어, 즉 300페이지 분량의 텍스트를 처리할 수 있다.\n\n데이터를 받아 결과를 발생시키는 것을 추론이라고 한다.\n이 추론 과정의 비용이 비싸기 때문에 LLaMA 등의 모델이 나온 이유 중 하나인데,\nGPT 4를 기준으로 추론 비용이 절반으로, 입력값의 비용을 1/3로 감소시켰다.\n\nGPT Database를 기존 2021년 9월에서 최신 2023년 4월로 업데이트했다.\n또한 GPT 4의 잦은 사용으로 제한이 걸린 경험이 있을 것인데, 이 제한을 약 2배로 늘렸다."
  },
  {
    "objectID": "posts/opeanai-devday_hypeduck/index.html#for-developers-assistants-api",
    "href": "posts/opeanai-devday_hypeduck/index.html#for-developers-assistants-api",
    "title": "OpenAI’s 1st Devday Recap",
    "section": "3. For Developers : Assistants API",
    "text": "3. For Developers : Assistants API\n\nJSON(JavaScript Object Notation)\n\n모든 질답에 대한 결과를 JSON 형식으로 받을 수 있어, 누락없이 구조화된 데이터를 다룰 수 있다.\n\nSeed\n\n흔히 Random Forest의 경우처럼 결과에 대한 일관성을 유지할 수 있도록 Seed값을 제공한다.\n전에는 질문마다 약간씩 다른 대답을 했다면, Seed를 통해 대답의 일관성을 보장할 것이다.\n\nGPT 4 FIne Tuning\n\nGPT 3.5가 아닌 GPT 4 버전을 Fine Tuning할 수 있다.\n\n\n\nAssistans API\n\nCode Interpreter : Python 코드 생성 및 해석기로 필요한 코드를 뒷단에서 수행한다. 그리고 이전처럼 과정에 대한 보고를 제공하면서 AI의 Blackbox 문제도 해결한다.\nKnowledge Retrieval : 외부 인터넷과 격리되지 않고 인터넷 검색을 통합적으로 수행할 뿐만 아니라, 사용자 개개인 특정 분야에 대한 지식도 Drag & Drop 만으로 학습시킬 수 있다.\nParallel Function Calling : 개발자가 함수화한 기능을 호출할 뿐만 아니라, 기존에는 명령이 누락된 경우가 있었다면, 이를 정확히 체크하고, 복잡한 경우 병렬로 수행한다."
  },
  {
    "objectID": "posts/opeanai-devday_hypeduck/index.html#for-enterprise-security",
    "href": "posts/opeanai-devday_hypeduck/index.html#for-enterprise-security",
    "title": "OpenAI’s 1st Devday Recap",
    "section": "4. For Enterprise : Security",
    "text": "4. For Enterprise : Security\n\nCustom Models Program\n\n학습량이 큰 기업들의 데이터를 활용한 GPT 4 FineTuning을 위해 OpenAI가 기업용 솔루션을 제공한다.\n각 특정 도메인에 맞는 RL(강화학습, RLHF..)을 제공한다.\n당연하게도 이 데이터는 공유되거나, 모델 성능 향상을 위한 데이터로 쓰이지 않는다고 한다."
  },
  {
    "objectID": "posts/donggeon/index.html",
    "href": "posts/donggeon/index.html",
    "title": "OpenAI DevDay, Opening Keynote 임동건",
    "section": "",
    "text": "OpenAI DevDay, Opening Keynote\nOpenAI의 GPT 4 Turbo 출시, Assistant API에 대한 Opinion\n\n정리\n\nGPT 4 Turbo 출시\n\n128,000 토큰 컨텍스트 (300페이지 이상의 텍스트에 해당하는 내용)\n함수 여러개 호출하기 편해짐\n23년 4월 까지의 데이터 최신화\n모델 개선\n\nGPT-4 turbo Vision API 출시\n음성합성 + 음성인식 개선\n\n파인튜닝 오픈\n\nGPT-3.5 파인튜닝 16k 버전 오픈\nGPT-4 파인튜닝은 일부 실험 접근 허용\n\nGPT-4 가격 인하\n\n인풋 토큰 : 1/3\n아웃풋 토큰 : 1/2\n\n\nGPTs 출시\n\n사용자 지정 버전의 GPT (chatbot 만들기 가능)\nGPT Store에 자신이 만든 앱을 통해 수익창출이 가능해짐\n\nAssistant API — API 개발을 쉽게 만들어 줌\n\n대화 내역 기반, 검색, 코드 실행, 함수 실행을 잘 활용할 수 있게 만듦\n\n\n\n\n\n생각\n\nGPT 공개 이후에 코딩 오류 수정시 엄청난 시간 절약을 할 수 있어 기술 개발을 위해 문턱을 낮춰주는 매우 좋은 서비스라고 생각했었다. 이런 기술 개발을 위한 문턱을 낮추는 일이 GPT 4 Turbo로 한 번 더 낮아진 것 같다는 생각이 들게 되었다. 특히 GPT Store를 통해 여러 아이디어를 가진 스타트업 기업들이 많이 생성될 것으로 예상이 된다. 따라서 앞으로는 어떤 지식이나 기술보다 사람들의 니즈를 잘 파악하는 것이 더 중요해질 것으로 생각된다.\n \n\n\n\n\n\nWriter : 임동건"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/yj story/index.html",
    "href": "posts/yj story/index.html",
    "title": "OpenAI DevDay Recap 고유정",
    "section": "",
    "text": "OpenAI DevDay Recap: Keynote\n\nMain Idea\nOpenAI가 최근 DevDay에서 발표한 최신 GPT모델 업데이트, 새로운 서비스 GPTs에 대한 정보 요약 및 느낀점\n\n\n\nKey Points\n\nGPTs로 인해, 개인/스타트업 등이 손쉽게 자체 서비스를 만들 수 있음.\nGPT-4 모델이 반값됨. 황의 법칙, 무어의 법칙은 진리인듯함. 앞으로 더 싸질 것.\nAgents 기능 강화와 멀티모달 기능강화로 자동화, 이미지 인식, 처리, 음성 인식 및 처리가 더 쉽고 정확해짐.\n\n\n\n\nSupporting Ideas\n\nGPT-4 Turbo: OpenAI의 새로운 모델로, 128,000 토큰 컨텍스트를 지원\nJson 모드: 출력을 json 형식으로만 제공\n펑션 콜링 개선: 여러 함수를 동시에 처리\nReproducible output: 동일한 시드 파라미터를 사용하면 동일한 결과 도출\n데이터 학습기간: 2021년 9월부터 2023년 4월까지 반영\n새로운 모달리티: GPT-4 Turbo with vision, 달리3, TTS등이 API로 제공\nWhisper V3: 오픈소스 모델로 API 제공 예정\nGPT-3.5 및 GPT-4파인튜닝: GPT-3.5의 16k 버전 공개되었고 GPT-4 파인튜닝은 일부 실험에 접근이 허용\n커스텀모델: 특정 도메인 학습을 위한 모델 훈련이 가능\nCopyright shield: 엔터프라이즈와 API 사용자들을 위한 저작권 보호기능\nGPT-4 및 GPT-3.5 가격 인하: GPT-4의 가격이 대폭 인하\n\n\n\n\nConclusion\n\n챗봇 분야에서 코딩의 영향력이 적어질것입니다. 코딩을 할 줄 알면 fine tuning이 가능하지만 proof of concept을 만들고 유용한 시나리오인지 판단하는 측면에서 코딩의 영향력이 적습니다.\n앞으로 AI 영역에서 퍼블릭 클라우드의 영역이 줄어들 가능성이 큽니다.\n자연어/이미지/음성 처리 분야에서는 GPT store가 App Store를 대체할 것입니다.\nOpen AI도 수익이 발생하는 곳은 기업 고객 시나리오라는 것을 잘 인지한 상태입니다. enterprise use case, security, data privacy, copyright 등을 논의한 지점이 그러합니다.\n추가적으로 MS는 든든한 우군을 얻었으나 언제까지 속해있을지는 미지수입니다. 구글이나 아마존은 불안한 상태이지만 그들도 다른 준비를 하고 있기 때문에 계속해서 새로운 플랫폼이 나올 것입니다.\n\n\n\n\nMy Opinion\nLow Price & High Speed & Large Volume\n가격, 속도, 양 모두를 고려한 모델이 나왔기때문에 매우 환영할 만한 발전이라고 생각합니다.\n우선 ‘가격 측면’에서 점점더 낮은 가격을 채택한 것은 이용자와 개발사 모두에게 좋은 선택이라고 생각합니다. 낮은 가격은 더 많은 고객을 유치하며, 이는 결과적으로 OpenAI의 성장을 촉진할 것으로 기대됩니다. 또한 현재 GPT 기반 서비스의 월 이용료가 약 30,000원으로 설정되어 있습니다. 이 가격은 컴퓨터와 모바일 기기에서 동시에 접속하여 매일 사용할 수 있는 권한을 제공하고 있지만, 현재로서는 합리적인 가격 수준에 있는 것은 아닙니다. 이 가격을 낮추는 아이디어를 검토한다면, GPT 기술을 보다 많은 사람들에게 접근 가능하게 만들고 상용화를 가속화시킬 수 있을 것으로 기대됩니다.\n다음으로,‘속도 측면’을 고려한 모델 업그레이드는 매우 우수한 개선 사항입니다. 사용자 관점에서 가장 중요하게 고려되는 측면 중 하나가 바로 속도입니다. 서비스 이용 시 응답 및 도출 시간이 지연될 경우 사용자들에게 큰 불편을 초래할 수 있기 때문입니다. 현재 소요되는 시간이 느린 것은 아니지만, 엄청난 속도는 아니기 때문입니다. 진행되는 상황을 계속 보여주기 때문에 우수하지만, 입력 후 기다리는 동안 사용자들은 다른 업무를 보게 됩니다. 이를 해결하기 위한 시도는 탁월하다고 생각합니다.\n세번째로, ‘양 측면’에서 더 많은 자료를 검색 창에 입력할 수 있도록 성능이 개선되었다고 생각합니다. 이전에는 입력 창에 너무 많은 내용을 입력하면 인식하지 못하는 경우가 있었지만, 앞으로는 하나의 문서, 발표 자료, 논문 등을 입력한 후에도 정확한 해석이 가능해질 것으로 기대합니다.\n추가로 개선해야 할 점을 제언해보면, 폴더 구조 및 웹 사이트 URL을 인식하는 시스템을 개발하는 것이 필요하다고 생각합니다. 현재는 여러 폴더를 포함한 파일 구조를 처리하는 데에 어려움이 있으며, 사이트 URL을 입력하더라도 적절한 정보를 읽어오지 못하는 경우가 발생하고 있습니다. 특히 ‘hallucination’ 문제를 해결하는 것이 시급합니다. 한국어와 관련된 자료를 검색할 때 오류가 많이 발생하고 있어, GPT 한국지사의 설립을 통해 세밀한 조정이 가능할 것으로 기대합니다.\n이러한 변화는 개발자, 컴퓨터 관련 업계 종사자, 인공지능 연구자 뿐만 아니라 일반 사용자들에게도 GPT를 일상적으로 활용할 수 있는 기회를 제공할 것으로 예상됩니다. 이러한 발전이 일어나면, GPT 기술을 더 폭넓게 보급하고 다양한 분야에서 활용할 수 있을 것입니다.\n\n\n\n\n\nWriter : 고유정"
  },
  {
    "objectID": "posts/markdown/index.html#definition",
    "href": "posts/markdown/index.html#definition",
    "title": "MarkDown Guide",
    "section": "1. Definition",
    "text": "1. Definition\nREADME파일이나 온라인 문서, 혹은 일반 텍스트 편집기로 문서 양식을 편집할 때 쓰입니다. 존 그루버는 2004년에 문법 면에서 에런 스워츠와 중대한 협업을 통해 마트다운 언어를 만들었으며, 사람들이 일기 쉽고 쓰기 쉬운 플레인 텍스트 포맷을 사용하여 쓸 수 있으면서 구조적으로 유효한 HTML로 선택적 변환이 가능합니다.John Gruber (DaringFireball)."
  },
  {
    "objectID": "posts/markdown/index.html#markdown-pros",
    "href": "posts/markdown/index.html#markdown-pros",
    "title": "MarkDown Guide",
    "section": "2. Markdown Pros",
    "text": "2. Markdown Pros\n\n읽기 쉽다. 확실히 마크다운은 다른 마크업 언어에 비해 가독성이 좋습니다. 문법도 단순하고, HTML은 작성하면서 브라우저에서 어떻게 보여 질지 예상하는게 쉽지 않지만, 마크다운을 사용한 텍스트는 브라우저에 보여질 내용을 쉽게 상상할 수 있습니다.\n익히기 쉽다. 존 그루버는 사람들이 많이 사용하는 것은 마크다운으로 사용하고, 복잡한 것은 HTML로 사용하기 바랬습니다. 그래서 문법이 매우 간단합니다. 그리고 마크다운으로 글을 작성할 때, 제한적인 기능 몇 개를 제외하고 HTML을 함께 사용해도 상관없습니다.\n모바일 친화적이다. 단순히 텍스트만 작성하는 것이 아닌 에디터를 이용해 모바일로 작성하는 것은 쉽지 않습니다. 하지만 마크다운을 이용하면 모바일에서도 태그로 쉽게 서식을 넣을 수 있어서, 에디터보다 훨씬 편합니다."
  },
  {
    "objectID": "posts/markdown/index.html#markdown-cons",
    "href": "posts/markdown/index.html#markdown-cons",
    "title": "MarkDown Guide",
    "section": "3. Markdown Cons",
    "text": "3. Markdown Cons\n\n문법이 너무 단순하다. 문법이 단순한 나머지 결국에는 HTML을 써야하는 경우가 생깁니다. 테이블 정렬 기능은 있지만, 이미지 정렬 기능이 없어서 HTML의 img 태그를 사용해야합니다. 태그에 클래스 지정등이 불가능하기 때문에, 클래스나 id를 지정하려면 HTML을 사용해야합니다.\n표준이 없어 사용자마다 문법이 상이할 수 있다. 문법이 단순하다 보니, 이러한 점을 해결하기 위해 확장문법들이 생겼고, 이러한 것들 때문에 한 곳에서 작동하는 마크다운 문서가 다른 곳에서는 잘 작동하지 않는 경우가 생기기도 합니다."
  },
  {
    "objectID": "posts/markdown/index.html#basic-markdown-syntax",
    "href": "posts/markdown/index.html#basic-markdown-syntax",
    "title": "MarkDown Guide",
    "section": "4. Basic Markdown Syntax",
    "text": "4. Basic Markdown Syntax\n\n이건 인용하는데 사용하는 코드입니다.\n\n\n오늘의 할일\n\ngit 공부\n프로젝트 수정\n\n\n\n점 종류\n\n작대기\n\n점\n\n더하기\n\n\n\n\n\n코드 작성\npython 코드\ndef greet(name):\n    print(f\"Hello, {name}!\")\ndef hello():\n    print(\"hello world\")\n코드 종료\n\n\n참조 링크\n\n구글 링크 추가 구글 링크\n\n\n\n이미지 추가\n\n\n\nConcrete_building"
  },
  {
    "objectID": "posts/markdown/index.html#font-color",
    "href": "posts/markdown/index.html#font-color",
    "title": "MarkDown Guide",
    "section": "5. Font Color",
    "text": "5. Font Color"
  },
  {
    "objectID": "posts/markdown/index.html#red",
    "href": "posts/markdown/index.html#red",
    "title": "MarkDown Guide",
    "section": "red",
    "text": "red"
  },
  {
    "objectID": "posts/markdown/index.html#파랑",
    "href": "posts/markdown/index.html#파랑",
    "title": "MarkDown Guide",
    "section": "파랑",
    "text": "파랑"
  },
  {
    "objectID": "posts/markdown/index.html#초록",
    "href": "posts/markdown/index.html#초록",
    "title": "MarkDown Guide",
    "section": "초록",
    "text": "초록"
  },
  {
    "objectID": "posts/markdown/index.html#strong",
    "href": "posts/markdown/index.html#strong",
    "title": "MarkDown Guide",
    "section": "Strong",
    "text": "Strong"
  },
  {
    "objectID": "posts/markdown/index.html#그레이",
    "href": "posts/markdown/index.html#그레이",
    "title": "MarkDown Guide",
    "section": "그레이",
    "text": "그레이"
  },
  {
    "objectID": "posts/markdown/index.html#노랑",
    "href": "posts/markdown/index.html#노랑",
    "title": "MarkDown Guide",
    "section": "노랑",
    "text": "노랑"
  },
  {
    "objectID": "posts/markdown/index.html#font-bold-italic-underline",
    "href": "posts/markdown/index.html#font-bold-italic-underline",
    "title": "MarkDown Guide",
    "section": "6. Font Bold / Italic / Underline",
    "text": "6. Font Bold / Italic / Underline\n\n기울기라 적으면 기울기처럼 글자를 기울일 수 있습니다.\n굵게라 적으면 굵게처럼 글자를 굵게 표시할 수 있습니다.\n굵게라 적으면 굵으며 기운처럼 글자를 굵으면서도 기울게 표시할 수 있습니다.\n밑줄라 적으면 밑줄처럼 밑줄을 그을 수 있습니다.\n(취향에 따라 * 표시 대신 _(언더라인)으로 대체할 수 있습니다)"
  },
  {
    "objectID": "posts/Commentary_on_Data_DG/index.html",
    "href": "posts/Commentary_on_Data_DG/index.html",
    "title": "Commentary on Data 임동건",
    "section": "",
    "text": "법령 데이터를 받은 소감\n도메인은 생각보다 더 중요하고, 데이터 전처리는 생각보다 더 많이 해야한다.\n\n도메인의 중요성에 대해 다시 한 번 깨달았습니다.\n법에대한 지식이 없다보니 무슨 업무를 해야 하는지에 대한 설명을 들었음에도 불구하고 law_mst.csv의 column과 안의 내용을 정확히 알 수 없어 국가 법령 정보센터에 들어가 해당 법을 확인했습니다. 셀 안의 값이 어떻게 이루어져 있는지 유추해내면서 셀 안의 값 들의 의미를 파악했습니다.\n\n\n\n데이터 전처리의 필요성\n실제 데이터를 활용하는 경우에 데이터가 Kaggle 이나 공모전에 활용하는 공공데이터 등과 같이 깔끔하지 않은 경우가 많다는 이야기를 들었습니다. law_mst.csv 파일의 경우에는 처음에는 파일에 문제가 있어 열리지 않아 여는데 상당한 시간을 들였으며 2019사무목록 최종본(인쇄용 최종)의 데이터에는 사람들이 작업한 항들이 있어서그런지 몰라도 같은 내용에 대한 뛰어쓰기나 특수 문자들이 다르게 들어간 경우를확인했습니다. 따라서 추가적인 오탈자가 있을 확률이 매우 크다고 생각합니다.따라서 오탈자를 효율적으로 확인할 방법을 생각해봐야겠다고 생각했습니다.\n\n\n\n나아가야 방향성에 대한 고민\n내가 이해한 업무에 따르면 법 조문을 보고 사무여부 파악 / 사무내용 파악 / 사무주체 파악 하는 업무로 이해했으나 정답지 역할을 하는 2019사무목록 최종본(인쇄용 최종)의 데이터는사무여부에 해당하는 내용만 있어 law_mst.csv파일을 보고 사무여부를 파악하는 모델을만들기는 힘들다는 생각이 들어 어떻게 해야하는가에 대한 고민을 하고있습니다.\n \n\n\n\n\nWriter : 임동건"
  },
  {
    "objectID": "posts/Commentary_on_data_HD/index.html",
    "href": "posts/Commentary_on_data_HD/index.html",
    "title": "EDA Commentary",
    "section": "",
    "text": "도메인 지식은 생각보다 금방 습득할 수 있다.\nOpenAPI와 국가DB 시스템이 굉장히 잘 되어 있는 편이지만, 통합된 느낌은 아니다.\n데이터 분석과 전처리는 겸험을 통한 에러와 아이디어이다."
  },
  {
    "objectID": "posts/Commentary_on_data_HD/index.html#data",
    "href": "posts/Commentary_on_data_HD/index.html#data",
    "title": "EDA Commentary",
    "section": "Data",
    "text": "Data\n\nlaw_mst.csv\ndata_2019.xlsx\ncodebook_2022.xlsx\nresearch.pdf"
  },
  {
    "objectID": "posts/Commentary_on_data_HD/index.html#data-source",
    "href": "posts/Commentary_on_data_HD/index.html#data-source",
    "title": "EDA Commentary",
    "section": "Data Source",
    "text": "Data Source\n\n국가법령정보 공동활용에서 Open Api를 통해 Parsing한 것으로 보임.\nresearch.pdf에 따르면 이를 통해 재구조화를 한 것으로 보임.\nData를 쪼개서 읾부 EOF 문제 발생\n\n\nTIL\n\ncsv 파일은 구분단위가 콤마(,) 단위인데, 이 때문에 데이터 문장 내에 콤마가 있는 경우 column 갯수에 대한 문제가 발생\n그래서 인용부호(““)를 사용하여 각 데이터를 감싼다."
  },
  {
    "objectID": "posts/Commentary_on_data_HD/index.html#domain",
    "href": "posts/Commentary_on_data_HD/index.html#domain",
    "title": "EDA Commentary",
    "section": "Domain",
    "text": "Domain\n\n법 조문 형식의 경우, 자주는 아니지만 익숙한 환경에서 자랐기 때문에 어색하지 않았다.\n또한, 빅데이터 핀테크 전문가 과정에서도 법령을 다룬 수업을 진행하여, ’제1조가 항상 목적’이고, ’제2조가 항상 정의’임을 인지하고 있어, 가공한 데이터 구조분석에도 큰 무리가 없었다."
  },
  {
    "objectID": "posts/Commentary_on_data_HD/index.html#eda",
    "href": "posts/Commentary_on_data_HD/index.html#eda",
    "title": "EDA Commentary",
    "section": "EDA",
    "text": "EDA\n\n임의로 이름지은 Feature들에 대한 해석이 필요했지만,\npython 라이브러리들 중 EDA를 편리하게 해주는 다양한 라이브러리들이 존재해서 비교적 의미를 빠르게 파악할 수 있었다.\n\nydata\nsweetviz\ndtale"
  },
  {
    "objectID": "posts/Commentary_on_data_HD/index.html#preprocessing",
    "href": "posts/Commentary_on_data_HD/index.html#preprocessing",
    "title": "EDA Commentary",
    "section": "Preprocessing",
    "text": "Preprocessing\n\nEOF처리는 nrows나 skiprows를 처리하면 크게 어렵지 않았다.\n아직까지 ML이나 DL을 효율적으로 분석하기 위해 Feature Engineering을 위한 고민을 하는 중이다."
  },
  {
    "objectID": "posts/Commentary_on_Data_YJ/index.html",
    "href": "posts/Commentary_on_Data_YJ/index.html",
    "title": "Commentary on Data 고유정",
    "section": "",
    "text": "총평\n사무유형을 분류하기 위해 전처리가 중요합니다.\n\n\n1. 조사 전\n조사전에 법령상 사무 총조사와 같은 선행 연구를 통해, 2010년과 2022년에 발간된 자료를 비교하며, 이러한 데이터의 주기적 업데이트와 개선이 이루어지고 있음을 알 수 있었습니다. Law.go.kr의 데이터만 업데이트하는 것이 아니라는 점이 인상깊었습니다. 판례나 약관이 아니라 법률 전문을 다룬다는 점이 복잡하면서도 많은 것을 배울 기회라고 생각합니다.\n\n\n\n2. 조사 과정\n법률 데이터는 단순한 체계가 아니기 때문에 분석이 필요하다고 생각했습니다. Python, pandas를 통해 csv파일을 열고, sweetviz, datatrep으로 eda를 해봤습니다.\n처음에는 349,809개에 이르는 대규모 데이터 세트를 처음 다루는 과정에서, CSV 파일이 열리지 않는 문제가 발생했습니다. 이는 마지막 줄의 중복과 일부 오타 때문인 것으로 추정됩니다. 이를 해결하기 위해 코드를 수정하고 Jupyter와 Pandas를 활용하여 데이터프레임(df)을 검토하였습니다. 데이터를 점진적으로 늘려가며 20개, 150개, 마지막 행 등을 확인했고, 총 11개의 피처 중 4개가 수치형(numeric), 7개가 범주형(categorical)으로 분석했습니다.\nEDA를 해봤을 때는, 주요 분류로 Overview,Variables, Interaction, Correlations, Missing Values를 보았습니다. Interactions의 경우는 x,y의 값을 다르게해서 그래프를 볼 수 있는데 유의미한 관계는 나타나지 않았습니다. 주요 컬럼으로는 ‘law_kor_nm’(법률명), ‘provision_no_nm’(조문 번호명), ‘clause_no’(항 번호), ‘provision_ttle’(조문 제목), ‘provision_cont_caluse_cont’(조문 내용) 등을 중점적으로 살펴보았습니다.\n\n\n\n2.1 사무여부\n이진데이터이기때문에 pandas를 통한 인코딩, 조건부 로직을 사용하면 될 것을 생각했습니다. \n\n\n2.2 사무명\n프로젝트를 받을 당시에 text summarization, KoBart를 통해 사무명을 요약추출해서 자동화하는 것이 가능하다는 생각을 했습니다. 한국어이고 법률 특성상 23조에서 ’15조에 따르면’과 같은 방식으로 선행 조항으로 가야할 경우가 많기 때문에 bi-encoder가 필요하다고 생각했습니다. \n\n\n2.3 사무유형\n가장 중요한 분류라고 생각합니다.\n사무유형을 판별하기 전에 법률이므로 전처리가 중요하다고 생각합니다. 임의적으로 결측치를 대체하거나 제거하면 문제가 발생할 것입니다. Nan값을 갖는 경우에 어떻게 처리를 할것인지에 대한 논의 즉, 항과 호가 선택적으로 있는 조가 많기 때문에 이에 대한 합의가 필요하다고 생각했습니다.\n\n\n\n3. 조사 후\n이번 프로젝트를 통해서 법률명, 조문 제목, 사무 명, 사무 유형 등의 핵심 키워드를 검색할 때 최신 개정사항을 반영하는 시스템 구축을 최종적으로 시연하는 것이 목표입니다. KoAlpaca 모델에 법률 데이터를 학습시켜 LoRA finetuning, 혹은 NER을 이용해보면 좋다고 생각합니다.\n \n\n\n\n\nWriter : 고유정"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "KPMG Capstone Project",
    "section": "",
    "text": "노희찬, 고유정, 임동건 으로 구성된 팀입니다."
  },
  {
    "objectID": "about.html#team-members",
    "href": "about.html#team-members",
    "title": "KPMG Capstone Project",
    "section": "Team Members",
    "text": "Team Members\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n노희찬\n고유정\n임동건\n\n\n클라우드 아키텍트\n데이터 사이언티스트\n데이터 사이언티스트\n\n\n풀스택 개발자\n데이터 분석 컨설턴트\n솔루션 개발자"
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "개발개요",
    "section": "",
    "text": ":::{#quarto-listing-pipeline .hidden} \\(e = mC^2\\)\n:::{.hidden render-id=“pipeline-listing-listing”}\n:::{.list .quarto-listing-default}\n\n\n  \n\n\n\n\nBase Table 만들기\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\n\n사무판단 개수 파악\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n:::\n\n\nNo matching items\n\n:::\n:::"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html",
    "href": "dev_posts/MakeBaseTable.html",
    "title": "Base Table 만들기",
    "section": "",
    "text": "# 필요 라이브러리 설치\nimport numpy as np\nimport pandas as pd\n\n\n# 데이터 load\ndata = pd.read_csv('main_data.csv')\n\n/var/folders/sy/5dw5r1ys5fdb3h0gbq8x0g6m0000gn/T/ipykernel_47971/1248266004.py:2: DtypeWarning: Columns (2,4,5,8,13,16,17,18,19,24) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv('main_data.csv')\n\n\n\ndata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 861719 entries, 0 to 861718\nData columns (total 25 columns):\n #   Column     Non-Null Count   Dtype  \n---  ------     --------------   -----  \n 0   소관부처명      861666 non-null  object \n 1   법령명        861702 non-null  object \n 2   법령구분       861704 non-null  object \n 3   조번호        861129 non-null  object \n 4   항번호        666590 non-null  object \n 5   호번호        504904 non-null  object \n 6   조문제목       805869 non-null  object \n 7   조문         848856 non-null  object \n 8   사무판단       767124 non-null  object \n 9   사무판단근거     700871 non-null  object \n 10  사무명        60113 non-null   object \n 11  수행주체       60116 non-null   object \n 12  사무유형       60071 non-null   object \n 13  위임사무판단     761139 non-null  object \n 14  위임근거규정     5311 non-null    object \n 15  수임기관       4416 non-null    object \n 16  특행기관       93089 non-null   object \n 17  재위임사무판단    702502 non-null  object \n 18  재위임근거규정    54 non-null      object \n 19  재수임기관      13 non-null      object \n 20  위탁사무판단     758703 non-null  float64\n 21  위탁근거규정     3975 non-null    object \n 22  수탁기관       3952 non-null    object \n 23  사무유형(소분류)  60114 non-null   object \n 24  기타         3 non-null       object \ndtypes: float64(1), object(24)\nmemory usage: 164.4+ MB"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#라이브러리-설치-및-데이터-불러오기",
    "href": "dev_posts/MakeBaseTable.html#라이브러리-설치-및-데이터-불러오기",
    "title": "Base Table 만들기",
    "section": "",
    "text": "# 필요 라이브러리 설치\nimport numpy as np\nimport pandas as pd\n\n\n# 데이터 load\ndata = pd.read_csv('main_data.csv')\n\n/var/folders/sy/5dw5r1ys5fdb3h0gbq8x0g6m0000gn/T/ipykernel_47971/1248266004.py:2: DtypeWarning: Columns (2,4,5,8,13,16,17,18,19,24) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv('main_data.csv')\n\n\n\ndata.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 861719 entries, 0 to 861718\nData columns (total 25 columns):\n #   Column     Non-Null Count   Dtype  \n---  ------     --------------   -----  \n 0   소관부처명      861666 non-null  object \n 1   법령명        861702 non-null  object \n 2   법령구분       861704 non-null  object \n 3   조번호        861129 non-null  object \n 4   항번호        666590 non-null  object \n 5   호번호        504904 non-null  object \n 6   조문제목       805869 non-null  object \n 7   조문         848856 non-null  object \n 8   사무판단       767124 non-null  object \n 9   사무판단근거     700871 non-null  object \n 10  사무명        60113 non-null   object \n 11  수행주체       60116 non-null   object \n 12  사무유형       60071 non-null   object \n 13  위임사무판단     761139 non-null  object \n 14  위임근거규정     5311 non-null    object \n 15  수임기관       4416 non-null    object \n 16  특행기관       93089 non-null   object \n 17  재위임사무판단    702502 non-null  object \n 18  재위임근거규정    54 non-null      object \n 19  재수임기관      13 non-null      object \n 20  위탁사무판단     758703 non-null  float64\n 21  위탁근거규정     3975 non-null    object \n 22  수탁기관       3952 non-null    object \n 23  사무유형(소분류)  60114 non-null   object \n 24  기타         3 non-null       object \ndtypes: float64(1), object(24)\nmemory usage: 164.4+ MB"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#설명변수소관부처명-법령명-조번호-항번호-호번호-조문제목-조문가-모두-결측치인-행-삭제",
    "href": "dev_posts/MakeBaseTable.html#설명변수소관부처명-법령명-조번호-항번호-호번호-조문제목-조문가-모두-결측치인-행-삭제",
    "title": "Base Table 만들기",
    "section": "1) 설명변수(소관부처명, 법령명, 조번호, 항번호, 호번호, 조문제목, 조문)가 모두 결측치인 행 삭제",
    "text": "1) 설명변수(소관부처명, 법령명, 조번호, 항번호, 호번호, 조문제목, 조문)가 모두 결측치인 행 삭제"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#section",
    "href": "dev_posts/MakeBaseTable.html#section",
    "title": "Base Table 만들기",
    "section": "",
    "text": "def x_null_drop(df): \n    select_column = ['소관부처명', '법령명', '조번호', '항번호', '호번호', '조문제목', '조문']\n    delete_row_idx = list(df[df[select_column].isnull().all(axis = 1)].index)\n    delete_row_idx.sort(reverse = True)\n    for i in delete_row_idx:\n        df = df.drop([i],axis = 0)\n    return df\n\n\ndata = x_null_drop(data)\n\n(861711, 25)"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#소관부처명-결측치-처리",
    "href": "dev_posts/MakeBaseTable.html#소관부처명-결측치-처리",
    "title": "Base Table 만들기",
    "section": "2) 소관부처명 결측치 처리",
    "text": "2) 소관부처명 결측치 처리\n\n소관부처명 결측치: 45개\n동일한 법령에 대해서는 동일한 소관부처를 가짐\n이에, 다른 행 중 동일한 법령을 지닌 소관부처 파악 후 결측치 채워줌\n\n\ndef dep_law_preprocessing(df):\n        # department_idx: '법령명'은 채워져있는데 '소관부처명'은 채워져있지 않은 행의 index\n        department_idx = df[df['소관부처명'].isnull() & df['법령명'].notnull()].index\n        # department_name_list: '소관부처명'이 채워져야할 법령명\n        department_name_list = df[df['소관부처명'].isnull() & df['법령명'].notnull()]['법령명'].unique()\n\n        department_dic = {}\n        department_dic['건설산업기본법'] = '국토교통부'\n        department_dic['보건범죄단속에관한특별조치법시행령'] = '보건복지부'\n        department_dic['항로표지법'] = '해양수산부'\n        department_dic['수산자원관리법'] = '해양수산부'\n        department_dic['연안관리법'] = '해양수산부'\n        department_dic['야생생물 보호 및 관리에 관한 법률'] = '환경부'\n\n        for i in range(len(department_idx)):\n                for j in range(len(department_name_list)):\n                        df.loc[department_idx[i],'소관부처명'] = department_dic[department_name_list[j]]\n\n        # '소관부처명', '법령명' 모두 채워져있지 않은 행\n        \n        return df\n\n\ndata = dep_law_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#법령명-결측치-처리",
    "href": "dev_posts/MakeBaseTable.html#법령명-결측치-처리",
    "title": "Base Table 만들기",
    "section": "3) 법령명 결측치 처리",
    "text": "3) 법령명 결측치 처리\n\n조, 항, 조문 통해 법령명 찾아 삽입\n\n\ndef law_name_preprocessing(df):\n    idx = 14168\n    df.loc[idx,'소관부처명'] = '고용노동부'\n    df.loc[idx,'법령명'] = '근로자퇴직급여 보장법'\n    df.loc[idx,'법령구분'] = 1\n\n    idx = 198519\n    df.loc[idx,'소관부처명'] = '국토교통부'\n    df.loc[idx,'법령명'] = '택수운송사업의 발전에 관한 법률'\n    df.loc[idx,'법령구분'] = 1\n    df.loc[idx,'조번호'] = 11\n    df.loc[idx,'항번호'] = 1\n    df.loc[idx,'조문제목'] = '감차계획의 수립 및 시행 등'\n    idx = 686791\n    df.loc[idx,'소관부처명'] = '해양수산부'\n    df.loc[idx,'법령명'] = '수산업ㆍ어촌 공익기능 증진을 위한 직접지불제도 운영에 관한 법률'\n\n    idx = 708300\n    df.loc[idx,'소관부처명'] = '해양수산부'\n    df.loc[idx,'법령명'] = '해양공간계획 및 관리에 관한 법률'\n\n    idx = 708831\n    df.loc[idx,'소관부처명'] = '해양수산부'\n    df.loc[idx,'법령명'] = '해양폐기물 및 해양오염퇴적물 관리법'\n\n    idx = 766079\n    df.loc[idx,'소관부처명'] = '행정안전부'\n    df.loc[idx,'법령명'] = '새마을금고법'\n\n    idx = 859679\n    df.loc[idx,'소관부처명'] = '환경부'\n    df.loc[idx,'법령명'] = '미세먼지 저감 및 관리에 관한 특별법'\n\n    idx = 859692\n    df.loc[idx,'소관부처명'] = '환경부'\n    df.loc[idx,'법령명'] = '미세먼지 저감 및 관리에 관한 특별법'\n\n    idx = 859755\n    df.loc[idx,'소관부처명'] = '환경부'\n    df.loc[idx,'법령명'] = '미세먼지 저감 및 관리에 관한 특별법'\n    \n    return df\n\n\ndata = law_name_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#법령구분-처리",
    "href": "dev_posts/MakeBaseTable.html#법령구분-처리",
    "title": "Base Table 만들기",
    "section": "4) 법령구분 처리",
    "text": "4) 법령구분 처리\n\n법령구분 결측치 처리\n법령구분 자료형 int로 통일\n\n\ndef law_category_preprocessing(df):\n    # '법령구분'이 결측치인 행들의 index\n    null_idx = df[df['법령구분'].isnull()].index\n    # 국가법령정보센터 확인 결과, 결측치인 모든 행들은 법률, 즉 '1'에 해당\n    for i in null_idx:\n        df.loc[i,'법령구분'] = 1\n    \n    # 국가법령정보센터 확인 결과, '법령구분'이 공백으로 되어있는 행은 시행령, 즉 '2'에 해당\n    df.loc[df['법령구분']==' ', \"법령구분\"] = 2\n\n    # 법령구분 자료형 통일\n    df['법령구분'] = df['법령구분'].astype('int64')\n\n    return df\n\n\ndata = law_category_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#사무판단-처리",
    "href": "dev_posts/MakeBaseTable.html#사무판단-처리",
    "title": "Base Table 만들기",
    "section": "5) 사무판단 처리",
    "text": "5) 사무판단 처리\n\n’ ’ -&gt; nan, ‘0’ -&gt; 0 , ‘1’ -&gt; 1, ‘0 1’ -&gt; 2 float 형태로 변환\n\n\ndef decision_preprocessing(df):\n    # 표기방식 통일\n    idx_nan = df[(df['사무판단'] == ' ')].index #idx_nan: '사무판단'이 nan인 행의 index\n    for i in idx_nan:\n        df.loc[i,'사무판단'] = np.nan\n    idx_0 = df[(df['사무판단'] == '0')].index #idx_0: '사무판단'이 '0'인 행의 index\n    for i in idx_0:\n        df.loc[i,'사무판단'] = 0\n    idx_1 = df[(df['사무판단'] == '1')].index #idx_1: '사무판단'이 '1'인 행의 index\n    for i in idx_1:\n        df.loc[i,'사무판단'] = 1\n    idx_2 = df[(df['사무판단'] == '0 1')].index #idx_2: '사무판단'이 '0 1'인 행의 index\n    for i in idx_2:\n        df.loc[i,'사무판단'] = 2\n\n    # 오류 행 삭제\n    ## 경우1: 사무가 아님에도 사무 유형이 분류된 경우\n    delete_0_idx = list((df[(df['사무판단'] == 0)  & (df['사무유형(소분류)'].notna())]).index)\n    df = df.drop(delete_0_idx, axis = 0)\n    \n    ## 경우2: 사무임에도 사무 유형이 분류되지 않은 경우\n    delete_1_idx1 = list((df[(df['사무판단'] == 1)  & (df['사무유형'].isnull())]).index)\n    df = df.drop(delete_1_idx1, axis = 0)\n    \n    delete_1_idx2 = list((df[(df['사무판단'] == 1)  & (df['사무유형(소분류)'].isnull())]).index)\n    df = df.drop(delete_1_idx2, axis = 0)\n\n    # 결측행 처리\n    ## 경우1: 사무 유형이 분류된 경우 =&gt; '1'로 채움\n    change_1_idx = df[(df['사무판단'].isnull())  & (df['사무유형'].notna()) & (df['사무유형(소분류)'].notna())].index\n    df.loc[change_1_idx, '사무판단'] = 1\n    \n    # 경우2: 사무 유형이 분류되지 않은 경우 =&gt; '0'으로 채움\n    change_0_idx = df[(df['사무판단'].isnull())  & (df['사무유형'].isnull()) & (df['사무유형(소분류)'].isnull())].index\n    df.loc[change_0_idx,'사무판단'] = 0\n    \n    # 자료형 통일\n    df['사무판단'] = df['사무판단'].astype('int64')\n\n    return df\n\n\ndata = decision_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#소관부처명-공백-처리",
    "href": "dev_posts/MakeBaseTable.html#소관부처명-공백-처리",
    "title": "Base Table 만들기",
    "section": "6) 소관부처명 공백 처리",
    "text": "6) 소관부처명 공백 처리\n\ndef blank_preprocessing(df):\n    df.loc[df['소관부처명']==\"교육부,\\n고용노동부\", \"소관부처명\"] = '고용노동부,교육부'\n    df.loc[df['소관부처명']==\"과학기술정보통신부, \\n교육부\", \"소관부처명\"] = '과학기술정보통신부,교육부'\n    df.loc[df['소관부처명']==\"교육부,\\n과학기술정보통신부\", \"소관부처명\"] = '과학기술정보통신부,교육부'\n    return df\n    \n\n\ndata = blank_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/MakeBaseTable.html#조문-조문-제목-결측치-처리",
    "href": "dev_posts/MakeBaseTable.html#조문-조문-제목-결측치-처리",
    "title": "Base Table 만들기",
    "section": "7) 조문, 조문 제목 결측치 처리",
    "text": "7) 조문, 조문 제목 결측치 처리\n\n조문, 조문 제목 null값이면 ’0’으로 채움\n\n\ndef law_preprocessing(df):\n    df.loc[df['조문제목'].isna(), '조문제목'] = '0'\n    df.loc[df['조문'].isna(), '조문'] = '0'\n    return df\n\n\ndata = law_preprocessing(data)"
  },
  {
    "objectID": "dev_posts/BaseTable2_EDA.html",
    "href": "dev_posts/BaseTable2_EDA.html",
    "title": "1. 사무판단 개수 파악",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nfrom matplotlib import rc\n%matplotlib inline\n\nModuleNotFoundError: No module named 'seaborn'\ndf = pd.read_csv('/Users/limdonggeon/Desktop/KPMG/Work/Law/data/BaseTable_2.csv')\n\n/var/folders/fs/zfypqyv96hs22x794hfx0ycm0000gn/T/ipykernel_40827/2812542215.py:1: DtypeWarning: Columns (4,5,13,16,17,18,19,24) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv('BaseTable_2.csv')\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 861624 entries, 0 to 861623\nData columns (total 25 columns):\n #   Column     Non-Null Count   Dtype  \n---  ------     --------------   -----  \n 0   소관부처명      861624 non-null  object \n 1   법령명        861624 non-null  object \n 2   법령구분       861624 non-null  int64  \n 3   조번호        861043 non-null  object \n 4   항번호        666511 non-null  object \n 5   호번호        504874 non-null  object \n 6   조문제목       861624 non-null  object \n 7   조문         861624 non-null  object \n 8   사무판단       861624 non-null  int64  \n 9   사무판단근거     700810 non-null  object \n 10  사무명        60068 non-null   object \n 11  수행주체       60069 non-null   object \n 12  사무유형       60026 non-null   object \n 13  위임사무판단     761044 non-null  object \n 14  위임근거규정     5292 non-null    object \n 15  수임기관       4398 non-null    object \n 16  특행기관       93064 non-null   object \n 17  재위임사무판단    702426 non-null  object \n 18  재위임근거규정    53 non-null      object \n 19  재수임기관      13 non-null      object \n 20  위탁사무판단     758608 non-null  float64\n 21  위탁근거규정     3970 non-null    object \n 22  수탁기관       3943 non-null    object \n 23  사무유형(소분류)  60026 non-null   object \n 24  기타         3 non-null       object \ndtypes: float64(1), int64(2), object(22)\nmemory usage: 164.3+ MB\ndf['사무판단'].unique()\n\narray([0, 1, 2])\n# 개수 파악\nN = len(df)\nratio_0 = (len(df[df['사무판단'] == 0]))/N *100\nratio_1 = (len(df[df['사무판단'] == 1]))/N *100\n\nprint(ratio_0,ratio_1)\n\n93.03338811360872 6.966263706674837\nrc('font', family='AppleGothic')\nplt.rcParams['axes.unicode_minus'] = False\n\nratio = [ratio_0, ratio_1]\nlabels = [0,1]\nexplode = [0, 0.10]\n\n#define Seaborn color palette to use\ncolors = sns.color_palette('pastel')[3:5]\n\n#create pie chart\nplt.pie(ratio, colors = colors, autopct='%.0f%%', startangle= 120, explode=explode)\nplt.legend(['사무가 아니다', '사무이다'], bbox_to_anchor=(1.3, 1))\nplt.title('\\n\\n\\n')\nplt.show()"
  },
  {
    "objectID": "dev_posts/BaseTable2_EDA.html#소관부처명에-따른-사무판단",
    "href": "dev_posts/BaseTable2_EDA.html#소관부처명에-따른-사무판단",
    "title": "1. 사무판단 개수 파악",
    "section": "2. 소관부처명에 따른 사무판단",
    "text": "2. 소관부처명에 따른 사무판단\n\ndf['소관부처명'].unique()\n\narray(['개인정보보호위원회', '경찰청,대검찰청,법무부', '경찰청,해양경찰청', '경찰청',\n       '경찰청,교육부,국토교통부,보건복지부', '경찰청,법무부', '고용노동부', '고용노동부,여성가족부',\n       '공정거래위원회', '과학기술정보통신부', '과학기술정보통신부,방송통신위원회', '과학기술정보통신부,법무부',\n       '과학기술정보통신부, 방송통신위원회', '교육부', '고용노동부,교육부', '교육부,행정안전부',\n       '교육부,문화체육관광부', '과학기술정보통신부,교육부', '국가보훈처', '국가안보실', '국가정보원',\n       '국가정보원,국무조정실', '국무조정실', '국무조정실,해양수산부', '가습기살균제사건과4.16세월호참사특별조사위원회',\n       '국무총리비서실', '국민권익위원회', '국방부', '국방부,병무청', '국방부,행정안전부',\n       '5.18민주화운동진상규명조사위원회', '국방부,방위사업청', '국방부,법무부', '국방부,방위사업청,산업통상자원부',\n       '교육부,국방부', '국토교통부', '국토교통부,산업통상자원부', '환경부', '국토교통부,해양수산부',\n       '국토교통부,환경부', '국토교통부,법무부', '국토교통부,행정중심복합도시건설청', '금융위원회',\n       '금융위원회,법무부', '기상청', '기획재정부', '기획재정부,행정안전부', '농림축산식품부',\n       '농림축산식품부,해양수산부', '농림축산식품부,농촌진흥청', '농림축산식품부,식품의약품안전처,해양수산부',\n       '농촌진흥청', '대통령경호처', '대통령실', '문화재청', '문화체육관광부', '방송통신위원회', '법무부',\n       '고용노동부,공정거래위원회,국토교통부,법무부,산업통상자원부,환경부', '행정안전부', '보건복지부', '법제처',\n       '보건복지부,질병관리청', '보건복지부,식품의약품안전처', '국토교통부,보건복지부',\n       '과학기술정보통신부,보건복지부,산업통상자원부', '경찰청,보건복지부', '질병관리청', '산림청', '산림청,환경부',\n       '산업통상자원부', '기획재정부,산업통상자원부', '국방부,산업통상자원부', '고용노동부,산업통상자원부',\n       '산업통상자원부,외교부', '소방청', '식품의약품안전처', '여성가족부', '여권과', '재외동포과',\n       '영사서비스과', '혁신행정담당관실', '외교사절담당관실', '국제법규과', '개발협력과', '다자협력인도지원과',\n       '유엔과', '개발전략과', '인사제도팀', '연구행정과', '공공외교총괄과', '재외공관담당관실',\n       '운영지원담당관실', '의전행사담당관실', '문화교류협력과', '외교사료팀', '한아프리카재단', '재외국민보호과',\n       '원자력안전위원회', '인사혁신처', '기획재정부,조달청', '조달청', '중소벤처기업부', '통계청',\n       '기획재정부,통계청', '통일부', '특허청', '해양경찰청', '법무부,해양경찰청', '국민안전처,해양경찰청',\n       '해양수산부', '산업통상자원부,해양수산부', '친일반민족행위진상규명위원회', '진실화해를위한과거사정리위원회',\n       '인사혁신처,행정안전부', '법제처,행정안전부', '소방청,해양경찰청,행정안전부', '국토교통부,행정안전부',\n       '해양수산부,환경부', '국무조정실,환경부', '국무조정실,기획재정부,환경부', '문화재청,환경부'],\n      dtype=object)\n\n\n\ndef law_work_count(i):\n    a = len(df.loc[(df['소관부처명']==i) & (df['사무판단']==0), ])\n    b = len(df.loc[(df['소관부처명']==i) & (df['사무판단']==1), ])\n\n    #print(f\"소관부처 {i}일때 ========\")\n    #print(f\"사무x: {a}\")\n    #print(f\"사무O: {b}\")\n    \n    result = [b, a, i]\n    return result\n\n\nresult = []\nfor i in df['소관부처명'].unique():\n    result.append(law_work_count(i))\n\n\nresult.sort(key=lambda x:x[0], reverse = True)\n\n\nresult[:10]\n\n[[5496, 51473, '환경부'],\n [5266, 108493, '국토교통부'],\n [4684, 50751, '행정안전부'],\n [3922, 45776, '산업통상자원부'],\n [3730, 42779, '보건복지부'],\n [3643, 54249, '해양수산부'],\n [2933, 47704, '기획재정부'],\n [2342, 23501, '농림축산식품부'],\n [2331, 25350, '교육부'],\n [1946, 21453, '과학기술정보통신부']]\n\n\n\ntask_num_by_department = []\ndepartment = []\nfor i in range(len(result)):\n    task_num_by_department.append(result[i][0])\n    department.append(result[i][2])\n\n\nfig, ax = plt.subplots(figsize=(5, 3))\ncolors = sns.color_palette('pastel')[4]\n#plt.scatter(range(len(result)),task_num_by_department,marker = '.')\nplt.bar(range(len(task_num_by_department)), task_num_by_department, color=colors)\nplt.title('\\n\\n\\n 소관부처별 사무판단 개수 파악\\n')\nplt.ylabel('개수')\nplt.xlim([-1,len(task_num_by_department)])\nplt.xticks([])\nplt.ylim([0,6000]);\nplt.yticks(np.arange(0, 6000, step=1000));\n\n\n\n\n\nresult[:10]\n\n[[5496, 51473, '환경부'],\n [5266, 108493, '국토교통부'],\n [4684, 50751, '행정안전부'],\n [3922, 45776, '산업통상자원부'],\n [3730, 42779, '보건복지부'],\n [3643, 54249, '해양수산부'],\n [2933, 47704, '기획재정부'],\n [2342, 23501, '농림축산식품부'],\n [2331, 25350, '교육부'],\n [1946, 21453, '과학기술정보통신부']]"
  },
  {
    "objectID": "dev_posts/BaseTable2_EDA.html#법령에-따른-사무판단",
    "href": "dev_posts/BaseTable2_EDA.html#법령에-따른-사무판단",
    "title": "1. 사무판단 개수 파악",
    "section": "3. 법령에 따른 사무판단",
    "text": "3. 법령에 따른 사무판단\n\ndf['법령구분'].unique()\n\narray([1, 2, 3])\n\n\n\ndf['사무판단'].unique()\n\narray([0, 1, 2])\n\n\n\ngroups = ['1', '2', '3']\nvalues1 = [len(df.loc[(df['법령구분']==1) & (df['사무판단']==0), ]), len(df.loc[(df['법령구분']==2) & (df['사무판단']==0), ]), len(df.loc[(df['법령구분']==3) & (df['사무판단']==0), ])]\nvalues2 = [len(df.loc[(df['법령구분']==1) & (df['사무판단']==1), ]), len(df.loc[(df['법령구분']==2) & (df['사무판단']==1), ]), len(df.loc[(df['법령구분']==3) & (df['사무판단']==1), ])]\n\n\nfig, ax = plt.subplots(figsize=(3, 5))\ncolors = sns.color_palette('pastel')[3:5]\n\n# stack bar 로 구성\nax.bar(groups, values1, color = colors[0])\nax.bar(groups, values2, bottom = values1, color = colors[1])\nplt.title('법령구분에 따른 사무판단 여부 파악\\n\\n')\nplt.xlabel('법령구분')\nplt.ylabel('개수')\nplt.legend(['사무가 아니다', '사무이다'], bbox_to_anchor=(1.7, 1))\nplt.ylim([0,450000])\nplt.yticks(np.arange(0, 500000, step=100000))\nplt.show()\n\n\n\n\n\n# def law_work_count(i):\n#     a = len(df.loc[(df['법령구분']==i) & (df['사무판단']==0), ])\n#     b = len(df.loc[(df['법령구분']==i) & (df['사무판단']==1), ])\n#     c = len(df.loc[(df['법령구분']==i) & (df['사무판단']==2), ])\n\n#     print(f\"법령 구분 {i}일때 ========\")\n#     print(f\"사무x: {a}\")\n#     print(f\"사무O: {b}\")\n#     print(f\"애매: {c}\")\n    \n\n#     result = [a, b, c]\n#     return result\n\n\n# result = []\n# for i in range(1, 4):\n#     result.append(law_work_count(i))\n# result\n\n\n# # 법령 구분에 따른 사무판단 비율 계산\n# ratio_df = df.groupby(['법령구분', '사무판단']).size().unstack().T\n# ratio_df = ratio_df.div(ratio_df.sum(axis=1), axis=0)\n\n# # 비율을 시각화\n# ratio_df.T.plot(kind='bar', stacked=True)\n# plt.title('법령구분에 따른 사무판단 비율')\n# plt.xlabel('법령구분')\n# plt.ylabel('Administrative Decision')\n# plt.show()"
  }
]